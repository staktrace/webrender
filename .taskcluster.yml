# This file specifies the configuration needed to test WebRender using the
# Taskcluster infrastructure. Most of this should be relatively self-explanatory;
# this file was originally generated by using the Taskcluster-GitHub integration
# quickstart tool at https://tools.taskcluster.net/quickstart/ and then expanded
# as needed.
#
version: 0
allowPullRequests: public
metadata:
  name: WebRender
  description: Runs WebRender tests in TaskCluster
  owner: '{{ event.head.user.email }}'
  source: '{{ event.head.repo.url }}'

# This file triggers a set of tasks; the ones targeting Linux are run in a docker
# container using docker-worker (which is a worker type provided by TaskCluster).
# The OS X ones are run in a custom worker type, for which we have worker
# instances configured and running.
tasks:
  # For the docker-worker tasks, the Docker image used
  # (staktrace/webrender-test:freetype28) was created using this Dockerfile:
  # ---
  #   FROM ubuntu:16.04
  #   RUN apt-get -y update && apt-get install -y curl git python python-pip cmake pkg-config libx11-dev libgl1-mesa-dev libfontconfig1-dev software-properties-common
  #   RUN add-apt-repository -y -u ppa:glasen/freetype2
  #   RUN apt-get -y install freetype2-demos
  #   RUN pip install mako voluptuous PyYAML servo-tidy
  #   RUN useradd -d /home/worker -s /bin/bash -m worker
  #   USER worker
  #   WORKDIR /home/worker
  #   ENV PATH $PATH:/home/worker/.cargo/bin
  #   CMD /bin/bash
  # ---
  #
  # The docker image may need to be updated over time if the set of required
  # packages increases. Note in particular that rust/cargo are not part of the
  # docker image, and are re-installed using rustup on each CI run. This ensures
  # the latest stable rust compiler is always used.
  # CI runs will be triggered on opening PRs, updating PRs, and pushes to the
  # repository.
  - metadata:
      name: OS X debug tests
      description: Runs debug-mode WebRender CI stuff on a OS X TC worker
      owner: '{{ event.head.user.email }}'
      source: '{{ event.head.repo.url }}'
    provisionerId: 'localprovisioner'
    workerType: 'webrender-ci-osx'
    extra:
      github:
        events:
          - pull_request.opened
          - pull_request.synchronize
          - push
        excludeBranches:
          - master
    payload:
      maxRunTime: 3600
      command:
        - - /bin/bash
          - '--login'
          - '-vec'
          - |
            rustup update stable
            git clone {{event.head.repo.url}} webrender
            cd webrender
            git checkout {{event.head.sha}}
            source $HOME/servotidy-venv/bin/activate
            servo-tidy
            export RUST_BACKTRACE=full
            export RUSTFLAGS='--deny warnings'
            export PKG_CONFIG_PATH="/usr/local/opt/zlib/lib/pkgconfig:$PKG_CONFIG_PATH"
            export RUSTC_WRAPPER=sccache
            (cd webrender_api && cargo test --verbose --features "ipc")
            (cd webrender && cargo check --verbose --no-default-features)
            (cd webrender && cargo check --verbose --no-default-features --features capture)
            (cd webrender && cargo check --verbose --features capture,profiler)
            (cd webrender && cargo check --verbose --features replay)
            (cd webrender && cargo check --verbose --no-default-features --features pathfinder)
            (cd wrench && cargo check --verbose --features env_logger)
            (cd examples && cargo check --verbose)
            (cargo test --all --verbose)
    routes:
      - "index.garbage.webrender.ci.{{event.head.user.login}}.{{event.head.repo.branch}}.osx-debug"
